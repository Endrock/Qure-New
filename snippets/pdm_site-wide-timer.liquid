{% comment %}
  Renders the countdown timer
  Accepts:
  - settings: [section.settings] - 
  Usage:
 {% render 'pdm_site-wide-timer' %}
{% endcomment %}
	<div class="sidecart-timer-container" data-finish-date="{{ settings.finish_date }}" data-start-date="{{ settings.start_date }}">
    <div class="sidecart-timer-container__label">{{ settings.label_ends }}</div>
    <div class="sidecart-timer-container__timer"> 
      <div class="sidecart-timer-container__timer--days amount-wrapper">
        <div class="sidecart-timer-container__timer--days-amount"></div>
      </div>
      <div class="sidecart-timer-container__timer--hours amount-wrapper">
        <div class="sidecart-timer-container__timer--hours-amount"></div>
      </div>
      <div class="sidecart-timer-container__timer--minutes amount-wrapper">
        <div class="sidecart-timer-container__timer--minutes-amount"></div>
      </div>
      <div class="sidecart-timer-container__timer--seconds amount-wrapper">
        <div class="sidecart-timer-container__timer--seconds-amount"></div>
      </div>
    </div>
	</div>

<script>
  /**
 * Initializes the sidecar timer on the page.
 *
 * This function checks if the sidecar timer is within the valid date range
 * and displays the countdown timer accordingly. If the current date is outside
 * the specified start and finish dates, the timer container is hidden. The timer
 * updates every second to show the remaining time in days, hours, minutes, and seconds.
 *
 * @function initSidecarTimer
 * @returns {void} - The function does not return a value.
 */
  function initSiteWideTimer () {
    const sidecartTimerContainer = document.querySelector('.site-header .sidecart-timer-container');

    if (!sidecartTimerContainer) return;

    let { finishDate, startDate } = sidecartTimerContainer.dataset;

     // parse dates
    startDate = parseCustomDate(startDate); 
    finishDate = parseCustomDate(finishDate);

   if (isNaN(startDate) || isNaN(finishDate)) {
     console.error('Invalid date format:', { startDate, finishDate });
     sidecartTimerContainer.style.display = 'none';
     return;
   }
 
   let now = new Date().getTime();
 
   // Hide timer if out of date
   if (now < startDate || now > finishDate) {
     sidecartTimerContainer.style.display = 'none';
     return;
   }
    
    const countdown = setInterval(function() {
      now = new Date().getTime();
      
      // Find the time remaining until the target date
      const remainingTime = finishDate - now;
      
      // Time calculations for days, hours, minutes, and seconds
      const days = Math.floor(remainingTime / (1000 * 60 * 60 * 24));
      setTimer(sidecartTimerContainer.querySelector('.sidecart-timer-container__timer--days-amount'),days);
      
      const hours = Math.floor((remainingTime % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60));
      setTimer(sidecartTimerContainer.querySelector('.sidecart-timer-container__timer--hours-amount'),hours);
      
      const minutes = Math.floor((remainingTime % (1000 * 60 * 60)) / (1000 * 60));
      setTimer(sidecartTimerContainer.querySelector('.sidecart-timer-container__timer--minutes-amount'),minutes);
      
      const seconds = Math.floor((remainingTime % (1000 * 60)) / 1000);
      setTimer(sidecartTimerContainer.querySelector('.sidecart-timer-container__timer--seconds-amount'),seconds);

      // clearInterval
      if (remainingTime < 0) {
        clearInterval(countdown);
      }
    }, 1000);

  }

  /**
 * This function formats the provided amount, ensuring it has a leading zero if it's
 * less than 10, and then updates the text content of the given selector with the formatted value.
 *
 * @function setTimer
 * @param {HTMLElement} selector - The HTML element where the timer value will be displayed.
 * @param {number} amount - The numerical value to be displayed in the timer (days, hours, minutes, or seconds).
 * @returns {void}
 */
  function setTimer (selector, amount) {
    let amountFixed = amount < 10 ? `0${amount}` : amount;
    selector.textContent = amountFixed;
  }

  /**
 * Parses a date string in the format "MM-DD-YYYY HH:MM" and returns the corresponding
 * timestamp in milliseconds.
 *
 * This function splits the date string into its date and time components, extracts
 * the month, day, year, hours, and minutes, and then constructs a Date object
 * using these values. The month is adjusted to be zero-indexed (0 for January, 11 for December).
 *
 * @function parseCustomDate
 * @param {string} dateString - The date string to be parsed, in the format "MM-DD-YYYY HH:MM".
 * @returns {number} - The timestamp in milliseconds representing the parsed date and time.
 */
function parseCustomDate(dateString) {
  const [datePart, timePart] = dateString.split(' ');
  const [month, day, year] = datePart.split('-').map(Number);
  const [hours, minutes] = timePart.split(':').map(Number);
  return new Date(year, month - 1, day, hours, minutes, 0, 0).getTime();
}

initSiteWideTimer();

</script>

