{% assign insuranceProduct = all_products["shipping-insurance"] %}

<script>
	var CustomInsuraceVariants = [
	{% for variant in insuranceProduct.variants %}
		"{{variant.id}}", 
	{% endfor %}
	]

	var currency = '{{ shop.money_with_currency_format | remove: ' ' | split: '' | first }}';
	var cart_price = '{{ cart.items_subtotal_price | money_without_currency | round:2 }}';
	var __discount_applied = false;
</script>

<script type="application/json" data-ajax-cart-initial-state> {{ cart | json }} </script> 
<script type="application/json" data-ajax-cart-configuration> { "addToCartCssClass": "js-my-cart-open" } </script>

<!-- Swiper JS Add PDM By Samu3le-->
<script src="https://cdn.jsdelivr.net/npm/swiper@11/swiper-bundle.min.js"></script>
  
<!-- Initialize Swiper -->
<script>
  // align cards center when they nedded
  const displayCard = () => {
      const customUpsell = document.querySelector(".my-floating-cart form.my-cart .custom_upsell .swiper-wrapper");
      if (!customUpsell) return;
      const shouldCenterSlide = customUpsell.querySelectorAll(".swiper-slide").length <= 2;
      customUpsell.classList.toggle('align-slide', shouldCenterSlide);
  }
  //create swiper Upsell 
  const upsellSwiper = () => {
    const isMobile = window.innerWidth <= 768;
    if(isMobile){
      return new Swiper('.swiper.custom_upsell', {
        slidesPerView: "auto",
        centeredSlides: false,
        slidesOffsetAfter: 20, 
        pagination: {
          el: '.swiper-pagination',
          clickable: true,
        },
        mousewheel:{
          forceToAxis:true
        }
      });
    }else{
      return new Swiper('.swiper.custom_upsell', {
        slidesPerView: "auto",
        centeredSlides: false,
        slidesOffsetAfter: 20, 
        pagination: {
          el: '.swiper-pagination',
          clickable: true,
        },
        navigation: {
          nextEl: '.swiper-button-next',
          prevEl: '.swiper-button-prev',
        },
        mousewheel:{
          forceToAxis:true
        }
      });
    }
  }
  //show upsell data only if the contain product
  const showUpsell = () => {
      const myCart = document.querySelector('form.my-cart');
      if (myCart) {
        const upsell = myCart.querySelector('.swiper.custom_upsell');
        if (upsell) {
          const upsellProducts = document.querySelectorAll('.swiper-slide.upsell_main');
          const hasUpsellProducts = upsellProducts.length == 0;
          upsell.classList.toggle('notVisible', hasUpsellProducts);
        }
      }
  };
  //init functionalities swiper upsell by pdm
  const initUpsellSwiper = () => {
    displayCard();
    showUpsell();
    const upsell = upsellSwiper();
      const isMobile = window.innerWidth <= 1179;
      if(isMobile && upsell){
        upsell.init();
      }
  }
  window.initUpsellSwiper =   initUpsellSwiper; 
</script>

<script type="module"> import { configureCart, subscribeToCartSectionsUpdate, cartRequestAdd, cartRequestChange, subscribeToCartAjaxRequests, getCartState } from '{{ "liquid-ajax-cart-v1.11.1.js" | asset_url  }}'; 
	configureCart('addToCartCssClass', 'js-my-cart-open'); 
  initUpsellSwiper(); //Upsell Swiper PDM when add product need show upsell slider

  subscribeToCartAjaxRequests(myRequestCallback => {
    if(myRequestCallback.requestType === 'add') {
      if(!window.event_product_handle) {
        let atc_href = myRequestCallback.info.initiator.getAttribute('href');
        let atc_url = new URL(atc_href, window.location.origin);
        let atc_variant_id = atc_url.searchParams.get('id');

        //console.log('atc_variant_id [' + atc_variant_id + ']'); 
        updateItemObject(atc_variant_id);
      }

      setTimeout(() => {
        if(window.event_product_handle)
        {
          //console.log('window.event_product_handle [' + window.event_product_handle + ']');

          fetchProductData(window.event_product_handle)
          .then(() => {
            console.log(window.item);
            _learnq.push(['track', 'Added to Cart', window.item]);
            window.event_product_handle = null;
          })
        }
        else
        {
          if(window.item != undefined)
          {
            console.log(window.item);
            _learnq.push(['track', 'Added to Cart', window.item]);
          }
        }
      }, 500);
    }
  })

	subscribeToCartSectionsUpdate( async sections => {
    const itemsAdd = []
    const cart = await statusCart();

		if (window.location.href.includes("q-rejuvalight-pro-offer"))
		{
			dicount(37390541553813, 44062187913455, 'N&D100');
		}
		else
		{
			{% if giftProduct != blank and giftQuantity != blank and giftPriceLimit != blank and giftDiscount != blank %}
				const giftProduct =  await gift(cart,'{{ giftProduct.variants.first.id }}', '{{ giftQuantity }}', '{{ giftPriceLimit }}', '{{ giftDiscount }}');
        if(giftProduct){
          itemsAdd.push(giftProduct);
        }
			{% endif %}
		}
    {% if enableProductGift and giftTresholdPdm != 0 and productGiftPdm != blank %}
      const pdmProductGift = productGiftPdm(cart,'{{ productGiftPdm.variants.first.id }}', {{ giftTresholdPdm }});
      if(pdmProductGift){
        itemsAdd.push(pdmProductGift);
      }
    {% endif %}

    if(itemsAdd.length>0){
      cartRequestAdd({
        items: itemsAdd
      }, {} )
    }

		if(typeof startCartTimer == 'function') {
			startCartTimer(15 * 60);
		}
     // new sidecart timer 
      const isTestActive = document.body.hasAttribute('data-sidecart-timer');
      if (isTestActive && 'function' == typeof initSidecarTimer) {
        initSidecarTimer();
      }

    	initUpsellSwiper();
	});

	function dicount(productId, dproductId, discountCode) {
    fetch('/cart.js')
    .then(response => response.json())
    .then(cart => {
        if(window.__discount_applied == false)
        {
          if (cart.items.some(item => item.id === +(productId)) && cart.items.some(item => item.id === +(dproductId))) {
            fetch('/discount/' + discountCode).then(async () => {
              var event = new Event('click', {
                  'bubbles': true,
                  'cancelable': true
              });

              document.querySelector("#cart-reload").dispatchEvent(event);
              window.__discount_applied = true;
            });
                  }
          else {
            window.__discount_applied = false;
          }
        }
		});
	}

  async function gift(cart,productId, productQuantity, priceLimit, discountCode = '') {
    var total_price = cart.total_price / 100;
    var gift = cart.items.some(item => item.id === +(productId));

    if (total_price > priceLimit && !gift) {
      const getDiscount =  await fetch('/discount/' + discountCode).then(response  => response.ok);
      if(!getDiscount) return;
      return  {
        id: productId,
        quantity: productQuantity,
        properties: {
          _discount_code: discountCode,
          _free_product: true
        }
      }
    }
    else if(total_price <= priceLimit && gift) {
      const giftInCart = cart.items.find(item => item.id === +(productId));
      cartRequestChange({
        id: giftInCart.key,
        quantity: 0
      },  {} )
    }
  }

  async function statusCart () {
    return await fetch('/cart.js').then(response => response.json());
  }

  function productGiftPdm (cart,productId,priceLimit) {
    if(!document.body.hasAttribute('data-free-gift-gamification')) return;
    const gift = cart.items.some(item => item.id === +(productId) && item.properties && item.properties['_required_validation']);
    const total_price = cart.total_price;
    if (total_price >= priceLimit && !gift) {
      return {
        id: productId,
        quantity: 1,
        properties: {
          _required_validation: 'validated',
        }
      }
    }else if (total_price < priceLimit && gift) {
      const getGiftInCart = cart.items.find(item => item.id === +(productId) && item.properties['_required_validation']);
      cartRequestChange({
        id: getGiftInCart.key,
        quantity: 0
      },  {} )
    }
  }
</script>
