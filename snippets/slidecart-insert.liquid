{% assign insuranceProduct = all_products["shipping-insurance"] %}

<script>
	var CustomInsuraceVariants = [
	{% for variant in insuranceProduct.variants %}
		"{{variant.id}}", 
	{% endfor %}
	]

	var currency = '{{ shop.money_with_currency_format | remove: ' ' | split: '' | first }}';
	var cart_price = '{{ cart.items_subtotal_price | money_without_currency | round:2 }}';
	var __discount_applied = false;
</script>

<script type="application/json" data-ajax-cart-initial-state> {{ cart | json }} </script> 
<script type="application/json" data-ajax-cart-configuration> { "addToCartCssClass": "js-my-cart-open" } </script>

<!-- Swiper JS Add PDM By Samu3le-->
<script src="https://cdn.jsdelivr.net/npm/swiper@11/swiper-bundle.min.js"></script>
  
<!-- Initialize Swiper -->
<script>
  // align cards center when they nedded
  const displayCard = () => {
      const customUpsell = document.querySelector(".my-floating-cart form.my-cart .custom_upsell .swiper-wrapper");
      if (!customUpsell) return;
      const shouldCenterSlide = customUpsell.querySelectorAll(".swiper-slide").length <= 2;
      customUpsell.classList.toggle('align-slide', shouldCenterSlide);
  }
  //create swiper Upsell 
  const upsellSwiper = () => {
    const isMobile = window.innerWidth <= 768;
    if(isMobile){
      return new Swiper('.swiper.custom_upsell', {
        slidesPerView: "auto",
        centeredSlides: false,
        slidesOffsetAfter: 20, 
        pagination: {
          el: '.swiper-pagination',
          clickable: true,
        },
        mousewheel:{
          forceToAxis:true
        }
      });
    }else{
      return new Swiper('.swiper.custom_upsell', {
        slidesPerView: "auto",
        centeredSlides: false,
        slidesOffsetAfter: 20, 
        pagination: {
          el: '.swiper-pagination',
          clickable: true,
        },
        navigation: {
          nextEl: '.swiper-button-next',
          prevEl: '.swiper-button-prev',
        },
        mousewheel:{
          forceToAxis:true
        }
      });
    }
  }
  //show upsell data only if the contain product
  const showUpsell = () => {
      const myCart = document.querySelector('form.my-cart');
      if (myCart) {
        const upsell = myCart.querySelector('.swiper.custom_upsell');
        if (upsell) {
          const upsellProducts = document.querySelectorAll('.swiper-slide.upsell_main');
          const hasUpsellProducts = upsellProducts.length == 0;
          upsell.classList.toggle('notVisible', hasUpsellProducts);
        }
      }
  };
  //init functionalities swiper upsell by pdm
  const initUpsellSwiper = () => {
    displayCard();
    showUpsell();
    const upsell = upsellSwiper();
      const isMobile = window.innerWidth <= 1179;
      if(isMobile && upsell){
        upsell.init();
      }
  }
  window.initUpsellSwiper =   initUpsellSwiper; 
</script>

<script type="module"> import { configureCart, subscribeToCartSectionsUpdate, cartRequestAdd, cartRequestChange, getCartState } from '{{ "liquid-ajax-cart-v1.11.1.js" | asset_url  }}'; 
	configureCart('addToCartCssClass', 'js-my-cart-open'); 
  initUpsellSwiper(); //Upsell Swiper PDM when add product need show upsell slider

	subscribeToCartSectionsUpdate( sections => {

		if (window.location.href.includes("q-rejuvalight-pro-offer"))
		{
			dicount(37390541553813, 44062187913455, 'N&D100');
		}
		else
		{
			{% if giftProduct != blank and giftQuantity != blank and giftPriceLimit != blank and giftDiscount != blank %}
				gift('{{ giftProduct.variants.first.id }}', '{{ giftQuantity }}', '{{ giftPriceLimit }}', '{{ giftDiscount }}');
			{% endif %}
		}
    {% if enableProductGift and giftTresholdPdm != 0 and productGiftPdm != blank %}
      productGiftPdm('{{ productGiftPdm.variants.first.id }}', '{{ giftTresholdPdm }}');
    {% endif %}

		if(typeof startCartTimer == 'function') {
			startCartTimer(15 * 60);
		}
    	initUpsellSwiper();
	});

	function dicount(productId, dproductId, discountCode) {
        fetch('/cart.js')
            .then(response => response.json())
            .then(cart => {
				if(window.__discount_applied == false)
				{
					if (cart.items.some(item => item.id === +(productId)) && cart.items.some(item => item.id === +(dproductId))) {
						fetch('/discount/' + discountCode).then(async () => {
							var event = new Event('click', {
									'bubbles': true,
									'cancelable': true
							});

							document.querySelector("#cart-reload").dispatchEvent(event);
							window.__discount_applied = true;
						});
                	}
					else {
						window.__discount_applied = false;
					}
				}
		});
	}

  function gift(productId, productQuantity, priceLimit, discountCode = '') {
        fetch('/cart.js')
            .then(response => response.json())
            .then(cart => {
				var total_price = cart.total_price / 100;
				var gift = cart.items.some(item => item.id === +(productId));

                if (total_price > priceLimit && !gift) {
					fetch('/discount/' + discountCode).then(async () => {
						cartRequestAdd({ 
						items: [
							{
								id: productId,
								quantity: productQuantity,
								properties: {
									_discount_code: discountCode,
									_free_product: true
								}
							}
						]  
					}, {} )
					});
                }
				else if(total_price <= priceLimit && gift)
				{
					const giftInCart = cart.items.find(item => item.id === +(productId));
					cartRequestChange({ 
						id: giftInCart.key,
						quantity: 0
					},  {} )
				}
		});
  }

  function productGiftPdm (productId,priceLimit) {
    if(document.body.hasAttribute('data-free-gift-gamification')){
      fetch('/cart.js').then(response => response.json()).then(cart => {
          const total_price = cart.total_price / 100;
          const gift = cart.items.some(item => item.id === +(productId));
          if ( total_price >= priceLimit && !gift){
            cartRequestAdd({
              items: [
                {
                  id: productId,
                  quantity: 1,
                  properties: {
                    _required_validation: 'validated',
                  }
                }
              ]
            }, {} )
          }else if (total_price < priceLimit && gift) {
            const getGiftInCart = cart.items.find(item => item.id === +(productId));
            cartRequestChange({
              id: getGiftInCart.key,
              quantity: 0
            },  {} )
          }
      });
    }
  }
  
</script>
